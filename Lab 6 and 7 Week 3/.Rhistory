ego_alter_dat[ego_alter_dat$KIN==0, "RACE_alter"]),
attribute=ego_dat[,"RACE"])
oddsratio_function(egoalter_tab=sextab,
attribute=ego_dat$SEX[ego_dat$NUMGIVEN>0])
sex_diversity=alts_diversity_entropy(egonetlist, alt.attr="SEX", base=exp(1))
head(sex_diversity)
race_diversity=alts_diversity_entropy(egonetlist, alt.attr="RACE", base=exp(1))
sex_diversity[ego_dat$NUMGIVEN<=1, "result"]=NA
race_diversity[ego_dat$NUMGIVEN<=1, "result"]=NA
summary(sex_diversity[,"result"])
summary(race_diversity[,"result"])
mean_altereduc=comp_ply(egonetlist, alt.attr="EDUC", .f=mean, na.rm = TRUE)
summary(mean_altereduc[,"result"])
ego_dat$HAPPY_FACTOR=factor(ego_dat$HAPPY, levels=c(3,2,1),
labels=c("not too happy", "pretty happy", "very
happy"))
ego_dat$RACE_FACTOR=factor(ego_dat$RACE,
levels=c("white", "asian", "black",
"hispanic", "other"))
ego_dat$SEX_FACTOR=factor(ego_dat$SEX)
ego_dat$DENSITY=dens
#getting values out of tibble format:
ego_dat$RACE_DIVERSITY=race_diversity[["result"]]
ego_dat$MEAN_ALTEREDUC=mean_altereduc[["result"]]
library(MASS)
# remove missing
ego_dat_nomiss=na.omit(ego_dat[,c("HAPPY_FACTOR", "NUMGIVEN", "DENSITY",
"MEAN_ALTEREDUC", "RACE_DIVERSITY",
"EDUC", "AGE", "RACE_FACTOR",
"SEX_FACTOR")])
# predicting happiness
summary(happy_mod1<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY,
data=ego_dat_nomiss))
library(MASS)
# remove missing
ego_dat_nomiss=na.omit(ego_dat[,c("HAPPY_FACTOR", "NUMGIVEN", "DENSITY",
"MEAN_ALTEREDUC", "RACE_DIVERSITY",
"EDUC", "AGE", "RACE_FACTOR",
"SEX_FACTOR")])
# predicting happiness
summary(happy_mod1<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY,
data=ego_dat_nomiss))
ego_dat_nomiss
summary(happy_mod2<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY + EDUC + AGE +
RACE_FACTOR + SEX_FACTOR, data=ego_dat_nomiss))
summary(happy_mod3<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY + EDUC + AGE +
RACE_FACTOR + SEX_FACTOR + MEAN_ALTEREDUC +
RACE_DIVERSITY, data=ego_dat_nomiss))
knitr::opts_chunk$set(echo = TRUE)
ego_dat=read.csv(file="https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_ego_dat.csv", stringsAsFactors=F)
ego_dat[1:10, c("CASEID", "AGE", "EDUC", "RACE", "SEX", "HAPPY", "NUMGIVEN")]
ego_dat=ego_dat[!is.na(ego_dat$NUMGIVEN),]
alter_dat=read.csv(file="https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_alter_dat.csv", stringsAsFactors=F)
alter_dat[1:10, c("CASEID", "ALTERID", "AGE", "EDUC", "RACE", "SEX", "KIN")]
nrow(ego_dat)
nrow(alter_dat)
alteralter_dat=read.csv(file="https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_alteralter_dat.csv")
alteralter_dat[1:10,]
library(egor)
library(dplyr)
library(purrr)
egonetlist = egor(alters=alter_dat, egos=ego_dat,
aaties=alteralter_dat, alter_design=list(max=5),
ID.vars=list(ego="CASEID", alter="ALTERID",
source="ALTER1", target="ALTER2"))
egonetlist
names(egonetlist)
egonetlist[["ego"]][,1:5]
egonetlist[["alter"]][,1:5]
dens=ego_density(egonetlist)
head(dens)
alteralter_dat[alteralter_dat$CASEID==19850001, ]
alteralter_dat[alteralter_dat$CASEID==19850002, ]
library(igraph)
igraph_nets=as_igraph(egonetlist)
igraph_nets[1:3]
vertex_attr(igraph_nets[[1]], "SEX")
alter_dat[alter_dat$CASEID==19850001, "SEX"]
purrr::walk(igraph_nets[1:3], plot)
plotfunc_colorgender=function(nets){ #input is the ego network
cols=vertex_attr(nets, "SEX") #extracting the attribute from the ego network
cols=ifelse(cols=="female","lightskyblue","blue") #using an ifelse statement
#to set color: light sky blue if gender equals female, blue otherwise
plot(nets, vertex.color=cols) #plotting ego network with nodes colored
#based on gender
}
purrr::walk(igraph_nets[1:3], plotfunc_colorgender)
prop_same_function=function(alt.attr, ego.attr){#inputs are alter attribute
#and ego attribute
same=sum(ego.attr==alt.attr) #taking ego attribute and comparing to alter #attributes, summing up number of times they match
same/(length(alt.attr)) #calculating proportion of ego-alter pairs that match
} #note that any ego with no alters or with missing data for the alter #attributes will return an NA
pmatch_sex=comp_ply(egonetlist, alt.attr="SEX", .f=prop_same_function,
ego.attr="SEX")
head(pmatch_sex)
egonetlist_kin=subset(egonetlist, egonetlist[["alter"]]$KIN==1, unit="alter")
pmatch_sex_kin=comp_ply(egonetlist_kin, alt.attr="SEX",
.f=prop_same_function, ego.attr="SEX")
egonetlist_nonkin=subset(egonetlist, egonetlist[["alter"]]$KIN==0,
unit="alter")
pmatch_sex_nonkin=comp_ply(egonetlist_nonkin, alt.attr="SEX",
.f=prop_same_function, ego.attr="SEX")
sexdat=data.frame(pmatch_sex$result, pmatch_sex_kin$result,
pmatch_sex_nonkin$result)
head(sexdat)
pmatch_race=comp_ply(egonetlist, alt.attr="RACE",
.f=prop_same_function, ego.attr="RACE") #all alters
pmatch_race_kin=comp_ply(egonetlist_kin, alt.attr="RACE",
.f=prop_same_function, ego.attr="RACE") #kin
pmatch_race_nonkin=comp_ply(egonetlist_nonkin, alt.attr="RACE",
.f=prop_same_function, ego.attr="RACE") #nonkin
racedat=data.frame(pmatch_race$result, pmatch_race_kin$result,
pmatch_race_nonkin$result)
head(racedat)
apply(sexdat, MARGIN=2, FUN=summary)
apply(racedat, MARGIN=2, FUN=summary)
ego_alter_dat=data.frame(as_alters_df(egonetlist, include.ego.vars=TRUE))
ego_alter_dat[1:5, c(".altID", ".egoID", "SEX", "RACE",
"SEX_ego", "RACE_ego")]
cnames=colnames(ego_alter_dat)
alter.columns=which(colnames(ego_alter_dat)=="AGE"):
which(colnames(ego_alter_dat)=="EDUC_CATEGORICAL")
cnames[alter.columns]
cnames[alter.columns]=paste(cnames[alter.columns], "_alter", sep="")
cnames
colnames(ego_alter_dat)=cnames
sextab=table(ego_alter_dat[,"SEX_ego"], ego_alter_dat[,"SEX_alter"])
sextab
sum(diag(sextab))/sum(sextab)
racetab=table(ego_alter_dat[,"RACE_ego"], ego_alter_dat[,"RACE_alter"])
sum(diag(racetab))/sum(racetab)
oddsratio_function = function(egoalter_tab, attribute) {
#The inputs are:
#egoalter_tab =table of interest;
#attribute=vector representing attribute of interest in the sample
#We first calculate the number of dyads that match and mismatch on the
#attribute based on the oberved data.
#We calculate the number matching by summing up over the diagonal of the
#the table (as these are cases where ego and alter have the same value).
match=sum(diag(egoalter_tab))
#We now calculate the number mismatching by taking the total number of
#dyads and subtracting the number that match (calculated above).
notmatch=sum(egoalter_tab)-match
#Now we calculate our chance expectations, defined as what would happen if we
#randomly paired all respondents from the data (defined in the input
#attribute vector), and calculated how many of those
#pairs were the same (and different) on the attribute of interest.
#We first do a table on the attribute, to see how many people fall
#into each category.
freq=table(attribute)
#We next calculate the total number of random pairings,
#assuming we pair all respondents with all respondents.
#This is simply the number of respondents times the number of
#respondents minus 1, as we assume we are not pairing people with themself.
total_dyads=sum(freq)*(sum(freq)-1)
#We now calculate the number of random pairings expected to match by chance.
#Formally, we take the number in each category (e.g., number of men) and #multiply that number by itself (minus 1 as we again
#assume people are not paired with themself), showing
#how many pairs would be the same if we paired all respondents with all
#respondents. Remember that R will multiply things elment-wise,
#so the following bit of code will take the first value in freq
#and multiply it by the first element in freq-1. We sum up the values
#to get the total number of dyads that are expected to match.
match_chance=sum(freq*(freq-1))
#We now calculate the number of dyads not matching by chance as the #difference between the total number of dyads and
#those matching by chance.
notmatch_chance = total_dyads-match_chance
#And finally we can calculate the odds ratio of observed odds of matching to
#odds of matching by chance
or=(match*notmatch_chance)/(notmatch*match_chance)
or
}
# odds matching gender and race
oddsratio_function(egoalter_tab=sextab, attribute=ego_dat[,"SEX"])
oddsratio_function(egoalter_tab=racetab, attribute=ego_dat[,"RACE"])
#odds of matching for kin ties, gender
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==1, "SEX_ego"],
ego_alter_dat[ego_alter_dat$KIN==1, "SEX_alter"]),
attribute=ego_dat[,"SEX"])
#odds of matching for kin ties, race
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==1, "RACE_ego"],
ego_alter_dat[ego_alter_dat$KIN==1, "RACE_alter"]),
attribute=ego_dat[,"RACE"])
#odds of matching for non-kin ties, gender
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==0, "SEX_ego"],
ego_alter_dat[ego_alter_dat$KIN==0, "SEX_alter"]),
attribute=ego_dat[,"SEX"])
#odds of matching for non-kin ties, race
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==0, "RACE_ego"],
ego_alter_dat[ego_alter_dat$KIN==0, "RACE_alter"]),
attribute=ego_dat[,"RACE"])
oddsratio_function(egoalter_tab=sextab,
attribute=ego_dat$SEX[ego_dat$NUMGIVEN>0])
sex_diversity=alts_diversity_entropy(egonetlist, alt.attr="SEX", base=exp(1))
head(sex_diversity)
race_diversity=alts_diversity_entropy(egonetlist, alt.attr="RACE", base=exp(1))
sex_diversity[ego_dat$NUMGIVEN<=1, "result"]=NA
race_diversity[ego_dat$NUMGIVEN<=1, "result"]=NA
summary(sex_diversity[,"result"])
summary(race_diversity[,"result"])
mean_altereduc=comp_ply(egonetlist, alt.attr="EDUC", .f=mean, na.rm = TRUE)
summary(mean_altereduc[,"result"])
ego_dat$HAPPY_FACTOR=factor(ego_dat$HAPPY, levels=c(3,2,1),
labels=c("not too happy", "pretty happy", "very
happy"))
ego_dat$RACE_FACTOR=factor(ego_dat$RACE,
levels=c("white", "asian", "black",
"hispanic", "other"))
ego_dat$SEX_FACTOR=factor(ego_dat$SEX)
ego_dat$DENSITY=dens
#getting values out of tibble format:
ego_dat$RACE_DIVERSITY=race_diversity[["result"]]
ego_dat$MEAN_ALTEREDUC=mean_altereduc[["result"]]
library(MASS)
# remove missing
ego_dat_nomiss=na.omit(ego_dat[,c("HAPPY_FACTOR", "NUMGIVEN", "DENSITY",
"MEAN_ALTEREDUC", "RACE_DIVERSITY",
"EDUC", "AGE", "RACE_FACTOR",
"SEX_FACTOR")])
# predicting happiness
summary(happy_mod1<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY,
data=ego_dat_nomiss))
class(ego_dat$DENSITY)
ego_dat$DENSITY
# fix data error in density
ego_dat$DENSITY <- unlist(ego_dat$DENSITY)
class(ego_dat_nomiss)
library(MASS)
# remove missing
ego_dat_nomiss=na.omit(ego_dat[,c("HAPPY_FACTOR", "NUMGIVEN", "DENSITY",
"MEAN_ALTEREDUC", "RACE_DIVERSITY",
"EDUC", "AGE", "RACE_FACTOR",
"SEX_FACTOR")])
# predicting happiness
summary(happy_mod1<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY,
data=ego_dat_nomiss))
knitr::opts_chunk$set(echo = TRUE)
ego_dat=read.csv(file="https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_ego_dat.csv", stringsAsFactors=F)
ego_dat[1:10, c("CASEID", "AGE", "EDUC", "RACE", "SEX", "HAPPY", "NUMGIVEN")]
ego_dat=ego_dat[!is.na(ego_dat$NUMGIVEN),]
alter_dat=read.csv(file="https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_alter_dat.csv", stringsAsFactors=F)
alter_dat[1:10, c("CASEID", "ALTERID", "AGE", "EDUC", "RACE", "SEX", "KIN")]
nrow(ego_dat)
nrow(alter_dat)
alteralter_dat=read.csv(file="https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_alteralter_dat.csv")
alteralter_dat[1:10,]
library(egor)
library(dplyr)
library(purrr)
egonetlist = egor(alters=alter_dat, egos=ego_dat,
aaties=alteralter_dat, alter_design=list(max=5),
ID.vars=list(ego="CASEID", alter="ALTERID",
source="ALTER1", target="ALTER2"))
egonetlist
names(egonetlist)
egonetlist[["ego"]][,1:5]
egonetlist[["alter"]][,1:5]
dens=ego_density(egonetlist)
head(dens)
alteralter_dat[alteralter_dat$CASEID==19850001, ]
alteralter_dat[alteralter_dat$CASEID==19850002, ]
library(igraph)
igraph_nets=as_igraph(egonetlist)
igraph_nets[1:3]
vertex_attr(igraph_nets[[1]], "SEX")
alter_dat[alter_dat$CASEID==19850001, "SEX"]
purrr::walk(igraph_nets[1:3], plot)
plotfunc_colorgender=function(nets){ #input is the ego network
cols=vertex_attr(nets, "SEX") #extracting the attribute from the ego network
cols=ifelse(cols=="female","lightskyblue","blue") #using an ifelse statement
#to set color: light sky blue if gender equals female, blue otherwise
plot(nets, vertex.color=cols) #plotting ego network with nodes colored
#based on gender
}
purrr::walk(igraph_nets[1:3], plotfunc_colorgender)
prop_same_function=function(alt.attr, ego.attr){#inputs are alter attribute
#and ego attribute
same=sum(ego.attr==alt.attr) #taking ego attribute and comparing to alter #attributes, summing up number of times they match
same/(length(alt.attr)) #calculating proportion of ego-alter pairs that match
} #note that any ego with no alters or with missing data for the alter #attributes will return an NA
pmatch_sex=comp_ply(egonetlist, alt.attr="SEX", .f=prop_same_function,
ego.attr="SEX")
head(pmatch_sex)
egonetlist_kin=subset(egonetlist, egonetlist[["alter"]]$KIN==1, unit="alter")
pmatch_sex_kin=comp_ply(egonetlist_kin, alt.attr="SEX",
.f=prop_same_function, ego.attr="SEX")
egonetlist_nonkin=subset(egonetlist, egonetlist[["alter"]]$KIN==0,
unit="alter")
pmatch_sex_nonkin=comp_ply(egonetlist_nonkin, alt.attr="SEX",
.f=prop_same_function, ego.attr="SEX")
sexdat=data.frame(pmatch_sex$result, pmatch_sex_kin$result,
pmatch_sex_nonkin$result)
head(sexdat)
pmatch_race=comp_ply(egonetlist, alt.attr="RACE",
.f=prop_same_function, ego.attr="RACE") #all alters
pmatch_race_kin=comp_ply(egonetlist_kin, alt.attr="RACE",
.f=prop_same_function, ego.attr="RACE") #kin
pmatch_race_nonkin=comp_ply(egonetlist_nonkin, alt.attr="RACE",
.f=prop_same_function, ego.attr="RACE") #nonkin
racedat=data.frame(pmatch_race$result, pmatch_race_kin$result,
pmatch_race_nonkin$result)
head(racedat)
apply(sexdat, MARGIN=2, FUN=summary)
apply(racedat, MARGIN=2, FUN=summary)
ego_alter_dat=data.frame(as_alters_df(egonetlist, include.ego.vars=TRUE))
ego_alter_dat[1:5, c(".altID", ".egoID", "SEX", "RACE",
"SEX_ego", "RACE_ego")]
cnames=colnames(ego_alter_dat)
alter.columns=which(colnames(ego_alter_dat)=="AGE"):
which(colnames(ego_alter_dat)=="EDUC_CATEGORICAL")
cnames[alter.columns]
cnames[alter.columns]=paste(cnames[alter.columns], "_alter", sep="")
cnames
colnames(ego_alter_dat)=cnames
sextab=table(ego_alter_dat[,"SEX_ego"], ego_alter_dat[,"SEX_alter"])
sextab
sum(diag(sextab))/sum(sextab)
racetab=table(ego_alter_dat[,"RACE_ego"], ego_alter_dat[,"RACE_alter"])
sum(diag(racetab))/sum(racetab)
oddsratio_function = function(egoalter_tab, attribute) {
#The inputs are:
#egoalter_tab =table of interest;
#attribute=vector representing attribute of interest in the sample
#We first calculate the number of dyads that match and mismatch on the
#attribute based on the oberved data.
#We calculate the number matching by summing up over the diagonal of the
#the table (as these are cases where ego and alter have the same value).
match=sum(diag(egoalter_tab))
#We now calculate the number mismatching by taking the total number of
#dyads and subtracting the number that match (calculated above).
notmatch=sum(egoalter_tab)-match
#Now we calculate our chance expectations, defined as what would happen if we
#randomly paired all respondents from the data (defined in the input
#attribute vector), and calculated how many of those
#pairs were the same (and different) on the attribute of interest.
#We first do a table on the attribute, to see how many people fall
#into each category.
freq=table(attribute)
#We next calculate the total number of random pairings,
#assuming we pair all respondents with all respondents.
#This is simply the number of respondents times the number of
#respondents minus 1, as we assume we are not pairing people with themself.
total_dyads=sum(freq)*(sum(freq)-1)
#We now calculate the number of random pairings expected to match by chance.
#Formally, we take the number in each category (e.g., number of men) and #multiply that number by itself (minus 1 as we again
#assume people are not paired with themself), showing
#how many pairs would be the same if we paired all respondents with all
#respondents. Remember that R will multiply things elment-wise,
#so the following bit of code will take the first value in freq
#and multiply it by the first element in freq-1. We sum up the values
#to get the total number of dyads that are expected to match.
match_chance=sum(freq*(freq-1))
#We now calculate the number of dyads not matching by chance as the #difference between the total number of dyads and
#those matching by chance.
notmatch_chance = total_dyads-match_chance
#And finally we can calculate the odds ratio of observed odds of matching to
#odds of matching by chance
or=(match*notmatch_chance)/(notmatch*match_chance)
or
}
# odds matching gender and race
oddsratio_function(egoalter_tab=sextab, attribute=ego_dat[,"SEX"])
oddsratio_function(egoalter_tab=racetab, attribute=ego_dat[,"RACE"])
#odds of matching for kin ties, gender
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==1, "SEX_ego"],
ego_alter_dat[ego_alter_dat$KIN==1, "SEX_alter"]),
attribute=ego_dat[,"SEX"])
#odds of matching for kin ties, race
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==1, "RACE_ego"],
ego_alter_dat[ego_alter_dat$KIN==1, "RACE_alter"]),
attribute=ego_dat[,"RACE"])
#odds of matching for non-kin ties, gender
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==0, "SEX_ego"],
ego_alter_dat[ego_alter_dat$KIN==0, "SEX_alter"]),
attribute=ego_dat[,"SEX"])
#odds of matching for non-kin ties, race
oddsratio_function(egoalter_tab=
table(ego_alter_dat[ego_alter_dat$KIN==0, "RACE_ego"],
ego_alter_dat[ego_alter_dat$KIN==0, "RACE_alter"]),
attribute=ego_dat[,"RACE"])
oddsratio_function(egoalter_tab=sextab,
attribute=ego_dat$SEX[ego_dat$NUMGIVEN>0])
sex_diversity=alts_diversity_entropy(egonetlist, alt.attr="SEX", base=exp(1))
head(sex_diversity)
race_diversity=alts_diversity_entropy(egonetlist, alt.attr="RACE", base=exp(1))
sex_diversity[ego_dat$NUMGIVEN<=1, "result"]=NA
race_diversity[ego_dat$NUMGIVEN<=1, "result"]=NA
summary(sex_diversity[,"result"])
summary(race_diversity[,"result"])
mean_altereduc=comp_ply(egonetlist, alt.attr="EDUC", .f=mean, na.rm = TRUE)
summary(mean_altereduc[,"result"])
ego_dat$HAPPY_FACTOR=factor(ego_dat$HAPPY, levels=c(3,2,1),
labels=c("not too happy", "pretty happy", "very
happy"))
ego_dat$RACE_FACTOR=factor(ego_dat$RACE,
levels=c("white", "asian", "black",
"hispanic", "other"))
ego_dat$SEX_FACTOR=factor(ego_dat$SEX)
ego_dat$DENSITY=dens
#getting values out of tibble format:
ego_dat$RACE_DIVERSITY=race_diversity[["result"]]
ego_dat$MEAN_ALTEREDUC=mean_altereduc[["result"]]
library(MASS)
# remove missing
ego_dat_nomiss=na.omit(ego_dat[,c("HAPPY_FACTOR", "NUMGIVEN", "DENSITY",
"MEAN_ALTEREDUC", "RACE_DIVERSITY",
"EDUC", "AGE", "RACE_FACTOR",
"SEX_FACTOR")])
# predicting happiness
summary(happy_mod1<-polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY,
data=ego_dat_nomiss))
egonets$netsize=ifelse(egonets$NUMGIVEN==6, 5, egonets$NUMGIVEN)
egonets=read.csv("https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/gss1985_egonetworks.csv")
colnames(egonets)
egonets$netsize=ifelse(egonets$NUMGIVEN==6, 5, egonets$NUMGIVEN)
egonets=egonets[!is.na(egonets$NUMGIVEN),]
ego_dat_fromonefile=egonets[,1:13]
alter_data_function=function(egonets,netsize,var_names,egoID){
#The inputs are:
#egonets=ego network data frame,
#netsize=vector of ego network size,
#var_names=names of variables to put on alter data frame (assumed to be #var.name1, var.name2, for each alter)
#egoID=name of id of ego on ego network data frame
overall_list=list() #creating empty list to hold output for each variable
#taking out the isolates as they have no alters:
egonets_noisolates=egonets[netsize>0,]
#redefining network size after taking out isolates:
netsize_updated=netsize[netsize>0]
for (p in 1:length(var_names)){ #running over each variable name
var_list=list()
alter_list=list()
for (x in 1:nrow(egonets_noisolates)){ #running over each ego
alter_nums=rep(1:netsize_updated[x],times=1) #getting alter id number
#Now we grab the alter columns for that ego and put those values in a larger #list so we can stack them later on
#into one big vector (one for each variable of interest)
var_list[[x]]=
egonets_noisolates[x,paste(rep(var_names[p],each=netsize_updated[x]),
alter_nums,sep="")]
alter_list[[x]]=alter_nums
}
var=unlist(var_list) #stacking all alter values into one long column
overall_list[[p]]=var
}
#putting all new variables together:
dat=data.frame(do.call(data.frame,overall_list))
colnames(dat)=var_names #putting useful column names on data frame
#adding egoID and alterID to data frame:
dat=cbind(rep(egonets_noisolates[,egoID], netsize_updated),
unlist(alter_list), dat)
colnames(dat)[1:2]=c(egoID,"alterID")
dat
}
alter_dat_fromonefile=
alter_data_function(egonets=egonets, netsize=egonets$netsize,
var_names=c("AGE", "EDUC", "RACE", "SEX", "RELIG"),
egoID="CASEID")
head(alter_dat_fromonefile)
alteralter_data_function=function(egonets, netsize, alteralter_tie_data,
egoID, max_alter){
#The inputs are:
#egonets=ego network data frame
#netsize=vector of ego network size
#alteralter_tie_data=data for each ego showing ties between alters;
#assumed to be ordered by 1-2; 1-3; 1-4; 1-5, etc. on the columns
#egoID=name of id of ego on ego network data frame
#max.alter=maximum of number of alter of which alter-alter tie
#data was reported on
overall_list=list()
egonets_noisolates=egonets[netsize>1,] #taking out the isolates
#and those with only one alter as they have no alter-alter ties
alteralter_tie_data=alteralter_tie_data[netsize>1,] #also taking out the #isolates and those with only one alter for the alter-alter tie input data
#redefining network size after taking out isolates:
netsize_updated=netsize[netsize>1]
alter_ids=t(combn(max_alter,2)) #defining possible alter-alter ties
for (x in 1:nrow(egonets_noisolates)){ #running over each ego
#First we create a data frame based on the ego ids, the possible alter-alter #ties and the weights for each alter-alter tie, based on the
#input data for that ego
alter_dat_row=data.frame(egoID=egonets_noisolates[x,egoID], alter_ids,
weight=unlist(alteralter_tie_data[x,]))
#Here we reduce some of the rows (corresponding to alter-alter ties)
#if ego had less than the max number of alters or if some
#of the alter-alter ties are not present (assumed if value
#is equal to 0 or NA)
alter_dat_row=alter_dat_row[alter_dat_row[,2] <= netsize_updated[x] &
alter_dat_row[,3] <= netsize_updated[x] &
!is.na(alter_dat_row$weight) &
alter_dat_row$weight!=0,]
overall_list[[x]]=alter_dat_row
}
alter_alter_dat=do.call(rbind,overall_list) #putting all alter-alter ties, by #ego, in one data frame
colnames(alter_alter_dat)=c(egoID,"source","target","weight") #putting useful #column names on the data frame
rownames(alter_alter_dat)=1:nrow(alter_alter_dat)
alter_alter_dat
}
alteralter_tie_data=egonets[,64:73]
alteralter_dat_fromonefile=
alteralter_data_function(egonets=egonets, netsize=egonets$netsize,
alteralter_tie_data=alteralter_tie_data,
egoID="CASEID", max_alter=5)
head(alteralter_dat_fromonefile)
egonetlist2=egor(alters=alter_dat_fromonefile, egos=ego_dat_fromonefile,
aaties=alteralter_dat_fromonefile,
alter_design=list(max=5),
ID.vars=list(ego="CASEID", alter="alterID",
source="source", target="target"))
